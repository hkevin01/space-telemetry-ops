version: '3.8'

services:
  # Redis - Hot Path Storage
  redis:
    image: redis:7-alpine
    container_name: space-telemetry-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - telemetry-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # PostgreSQL - Warm Path Storage
  postgres:
    image: postgres:15-alpine
    container_name: space-telemetry-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: telemetry
      POSTGRES_USER: telemetry_user
      POSTGRES_PASSWORD: telemetry_pass123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - telemetry-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telemetry_user -d telemetry"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO - Cold Path Storage
  minio:
    image: minio/minio:latest
    container_name: space-telemetry-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123456
      MINIO_DOMAIN: minio
      MINIO_SERVER_URL: http://minio:9000
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - telemetry-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Node.js Ingestion Service
  ingestion-service:
    build:
      context: ../src/services/ingest-node
      dockerfile: Dockerfile
    container_name: space-telemetry-ingestion
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PORT: 8080
      WS_PORT: 8081
      LOG_LEVEL: info
    ports:
      - "8080:8080"
      - "8081:8081"
    volumes:
      - ingestion_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - telemetry-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Airflow - ETL Orchestration
  airflow-webserver:
    build:
      context: ../src/services/etl-airflow
      dockerfile: Dockerfile
    container_name: space-telemetry-airflow-webserver
    restart: unless-stopped
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_user:airflow_pass123@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: redis://redis:6379/1
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/1
      AIRFLOW__CORE__FERNET_KEY: $(openssl rand -base64 32)
      AIRFLOW__WEBSERVER__SECRET_KEY: $(openssl rand -base64 32)
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin123
    ports:
      - "8082:8080"
    volumes:
      - airflow_logs:/opt/airflow/logs
      - airflow_dags:/opt/airflow/dags
      - airflow_plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - telemetry-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    build:
      context: ../src/services/etl-airflow
      dockerfile: Dockerfile
    container_name: space-telemetry-airflow-scheduler
    restart: unless-stopped
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_user:airflow_pass123@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: redis://redis:6379/1
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/1
      AIRFLOW__CORE__FERNET_KEY: $(openssl rand -base64 32)
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - airflow_logs:/opt/airflow/logs
      - airflow_dags:/opt/airflow/dags
      - airflow_plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - telemetry-network
    command: airflow scheduler

  # React Frontend
  frontend:
    build:
      context: ../src/frontend
      dockerfile: Dockerfile
    container_name: space-telemetry-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: http://localhost:8083
      REACT_APP_WS_URL: ws://localhost:8081
    ports:
      - "3000:3000"
    depends_on:
      - ingestion-service
      - backend-api
    networks:
      - telemetry-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend-api:
    build:
      context: ../src/backend
      dockerfile: Dockerfile
    container_name: space-telemetry-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://telemetry_user:telemetry_pass123@postgres:5432/telemetry
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123456
      SECRET_KEY: $(openssl rand -base64 32)
    ports:
      - "8083:8000"
    volumes:
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - telemetry-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: space-telemetry-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - telemetry-network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: space-telemetry-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - telemetry-network

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: space-telemetry-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend-api
      - ingestion-service
    networks:
      - telemetry-network

networks:
  telemetry-network:
    driver: bridge
    name: space-telemetry-network

volumes:
  postgres_data:
    name: space-telemetry-postgres-data
  redis_data:
    name: space-telemetry-redis-data
  minio_data:
    name: space-telemetry-minio-data
  airflow_logs:
    name: space-telemetry-airflow-logs
  airflow_dags:
    name: space-telemetry-airflow-dags
  airflow_plugins:
    name: space-telemetry-airflow-plugins
  ingestion_logs:
    name: space-telemetry-ingestion-logs
  backend_logs:
    name: space-telemetry-backend-logs
  prometheus_data:
    name: space-telemetry-prometheus-data
  grafana_data:
    name: space-telemetry-grafana-data
