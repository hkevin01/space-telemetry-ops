# Space Telemetry Operations Test Configuration

[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Async support
asyncio_mode = auto

# Output configuration
addopts =
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings

# Timeout configuration
timeout = 300
timeout_method = thread

# Markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for system interactions
    hot_path: HOT path (Redis) real-time processing tests
    warm_path: Warm path (PostgreSQL) operational analytics tests
    cold_path: Cold path (MinIO) long-term storage tests
    analytics_path: Analytics path (Vector DB/ML) tests
    space_commands: Space command processing tests
    critical: Critical system tests that must pass for mission readiness
    performance: Performance and load testing
    slow: Tests that take longer than usual to run

# Minimum version
minversion = 6.0

# Test session configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration (if using pytest-cov)
[coverage:run]
source = src
omit =
    tests/*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    pass

# Test data and fixtures
[tool:pytest]
# Custom test data paths
testdata_dir = tests/data
fixtures_dir = tests/fixtures
results_dir = test_results
